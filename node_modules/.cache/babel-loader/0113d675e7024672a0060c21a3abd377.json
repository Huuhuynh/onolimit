{"ast":null,"code":"import { extend, addClass, removeClass, setValue, isBlazor } from '@syncfusion/ej2-base';\nimport { remove, classList, updateBlazorTemplate, blazorTemplates, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { parentsUntil, inArray, refreshForeignData, getObject } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport { CellRenderer } from '../renderer/cell-renderer';\nimport { Row } from '../models/row';\nimport { Cell } from '../models/cell';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n * @hidden\n */\n\nvar BatchEdit =\n/** @class */\nfunction () {\n  function BatchEdit(parent, serviceLocator, renderer) {\n    this.cellDetails = {};\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.renderer = renderer;\n    this.focus = serviceLocator.getService('focus');\n    this.addEventListener();\n  }\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.click, this.clickHandler, this);\n    this.parent.on(events.dblclick, this.dblClickHandler, this);\n    this.parent.on(events.beforeCellFocused, this.onBeforeCellFocused, this);\n    this.parent.on(events.cellFocused, this.onCellFocused, this);\n    this.dataBoundFunction = this.dataBound.bind(this);\n    this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n    this.parent.on(events.doubleTap, this.dblClickHandler, this);\n    this.parent.on(events.keyPressed, this.keyDownHandler, this);\n    this.parent.on(events.editNextValCell, this.editNextValCell, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.click, this.clickHandler);\n    this.parent.off(events.dblclick, this.dblClickHandler);\n    this.parent.off(events.beforeCellFocused, this.onBeforeCellFocused);\n    this.parent.off(events.cellFocused, this.onCellFocused);\n    this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n    this.parent.off(events.doubleTap, this.dblClickHandler);\n    this.parent.off(events.keyPressed, this.keyDownHandler);\n    this.parent.off(events.editNextValCell, this.editNextValCell);\n  };\n\n  BatchEdit.prototype.dataBound = function () {\n    this.parent.notify(events.toolbarRefresh, {});\n  };\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  BatchEdit.prototype.clickHandler = function (e) {\n    if (!parentsUntil(e.target, this.parent.element.id + '_add', true)) {\n      if (this.parent.isEdit) {\n        this.saveCell();\n        this.editNextValCell();\n      }\n\n      if (parentsUntil(e.target, 'e-rowcell') && !this.parent.isEdit) {\n        this.setCellIdx(e.target);\n      }\n    }\n  };\n\n  BatchEdit.prototype.dblClickHandler = function (e) {\n    var target = parentsUntil(e.target, 'e-rowcell');\n    var tr = parentsUntil(e.target, 'e-row');\n\n    if (target && tr && !isNaN(parseInt(target.getAttribute('aria-colindex'), 10)) && !target.parentElement.classList.contains('e-editedrow')) {\n      this.editCell(parseInt(tr.getAttribute('aria-rowindex'), 10), this.parent.getColumns()[parseInt(target.getAttribute('aria-colindex'), 10)].field, this.isAddRow(parseInt(tr.getAttribute('aria-rowindex'), 10)));\n    }\n  };\n\n  BatchEdit.prototype.onBeforeCellFocused = function (e) {\n    if (this.parent.isEdit && this.validateFormObj() && (e.byClick || ['tab', 'shiftTab', 'enter', 'shiftEnter'].indexOf(e.keyArgs.action) > -1)) {\n      e.cancel = true;\n\n      if (e.byClick) {\n        e.clickArgs.preventDefault();\n      } else {\n        e.keyArgs.preventDefault();\n      }\n    }\n  };\n\n  BatchEdit.prototype.onCellFocused = function (e) {\n    var frzCols = this.parent.getFrozenColumns();\n    var mCont = this.parent.getContent().querySelector('.e-movablecontent');\n    var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');\n    var clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);\n\n    if (!e.byKey || clear) {\n      if (this.parent.isEdit && clear) {\n        this.saveCell();\n      }\n\n      return;\n    }\n\n    var _a = e.container.indexes,\n        rowIndex = _a[0],\n        cellIndex = _a[1];\n\n    if (frzCols && (mCont.contains(e.element) || this.parent.frozenRows && mHdr.contains(e.element))) {\n      cellIndex += frzCols;\n    }\n\n    if (this.parent.frozenRows && e.container.isContent) {\n      rowIndex += this.parent.frozenRows;\n    }\n\n    var isEdit = this.parent.isEdit;\n\n    if (!this.parent.element.querySelectorAll('.e-popup-open').length) {\n      isEdit = isEdit && !this.validateFormObj();\n\n      switch (e.keyArgs.action) {\n        case 'tab':\n        case 'shiftTab':\n          if (isEdit || this.parent.isLastCellPrimaryKey) {\n            this.editCellFromIndex(rowIndex, cellIndex);\n          }\n\n          break;\n\n        case 'enter':\n        case 'shiftEnter':\n          e.keyArgs.preventDefault();\n\n          if (isEdit) {\n            this.editCell(rowIndex, this.cellDetails.column.field);\n          }\n\n          break;\n\n        case 'f2':\n          this.editCellFromIndex(rowIndex, cellIndex);\n          this.focus.focus();\n          break;\n      }\n    }\n  };\n\n  BatchEdit.prototype.isAddRow = function (index) {\n    return this.parent.getDataRows()[index].classList.contains('e-insertedrow');\n  };\n\n  BatchEdit.prototype.editCellFromIndex = function (rowIdx, cellIdx) {\n    this.cellDetails.rowIndex = rowIdx;\n    this.cellDetails.cellIndex = cellIdx;\n    this.editCell(rowIdx, this.parent.getColumns()[cellIdx].field, this.isAddRow(rowIdx));\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  BatchEdit.prototype.closeEdit = function () {\n    var gObj = this.parent;\n    var rows = this.parent.getRowsObject();\n    var argument = {\n      cancel: false,\n      batchChanges: this.getBatchChanges()\n    };\n    gObj.notify(events.beforeBatchCancel, argument);\n\n    if (argument.cancel) {\n      return;\n    }\n\n    if (gObj.frozenColumns && rows.length < this.parent.currentViewData.length * 2) {\n      rows.push.apply(rows, this.parent.getMovableRowsObject());\n    }\n\n    var cols = this.parent.getColumns();\n\n    if (isBlazor()) {\n      for (var i = 0; i < cols.length; i++) {\n        var col = cols[i];\n\n        if (col.template) {\n          updateBlazorTemplate(this.parent.element.id + col.uid, 'Template', col, false);\n        }\n      }\n    }\n\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tr;\n    var mTr;\n    var movObj;\n\n    if (gObj.isEdit) {\n      this.saveCell(true);\n    }\n\n    this.isAdded = false;\n    gObj.clearSelection();\n\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].isDirty) {\n        if (gObj.frozenColumns) {\n          movObj = gObj.getMovableRowsObject()[rows[i].index];\n          movObj.isDirty = true;\n        }\n\n        tr = gObj.getContentTable().querySelector('[data-uid=' + rows[i].uid + ']');\n\n        if (gObj.frozenRows && !tr) {\n          tr = gObj.getHeaderContent().querySelector('[data-uid=' + rows[i].uid + ']');\n        }\n\n        if (gObj.frozenColumns) {\n          if (gObj.frozenRows) {\n            mTr = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('[data-uid=' + rows[i].uid + ']');\n\n            if (!mTr) {\n              mTr = gObj.getContent().querySelector('.e-movablecontent').querySelector('[data-uid=' + rows[i].uid + ']');\n            }\n          } else {\n            mTr = gObj.getContent().querySelector('.e-movablecontent').querySelector('[data-uid=' + rows[i].uid + ']');\n          }\n        }\n\n        if (tr || mTr) {\n          if (tr && tr.classList.contains('e-insertedrow') || mTr && mTr.classList.contains('e-insertedrow')) {\n            if (tr) {\n              remove(tr);\n            }\n\n            if (mTr && (gObj.frozenColumns || gObj.frozenRows)) {\n              remove(mTr);\n            }\n\n            this.removeRowObjectFromUID(rows[i].uid);\n            i--;\n          } else {\n            refreshForeignData(rows[i], this.parent.getForeignKeyColumns(), rows[i].data);\n            delete rows[i].changes;\n            delete rows[i].edit;\n            rows[i].isDirty = false;\n            var ftr = mTr ? mTr : tr;\n            classList(ftr, [], ['e-hiddenrow', 'e-updatedtd']);\n            rowRenderer.refresh(rows[i], gObj.getColumns(), false);\n\n            if (this.parent.aggregates.length > 0) {\n              var type = 'type';\n              var editType = [];\n              editType[type] = 'cancel';\n              this.parent.notify(events.refreshFooterRenderer, editType);\n\n              if (this.parent.groupSettings.columns.length > 0) {\n                this.parent.notify(events.groupAggregates, editType);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!gObj.getContentTable().querySelector('tr.e-row')) {\n      gObj.renderModule.renderEmptyRow();\n    }\n\n    var args = {\n      requestType: 'batchCancel',\n      rows: this.parent.getRowsObject()\n    };\n    gObj.notify(events.batchCancel, {\n      rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() : [new Row({\n        isDataRow: true,\n        cells: [new Cell({\n          isDataCell: true,\n          visible: true\n        })]\n      })]\n    });\n    gObj.selectRow(this.cellDetails.rowIndex);\n    this.refreshRowIdx();\n    gObj.notify(events.toolbarRefresh, {});\n    this.parent.notify(events.tooltipDestroy, {});\n    args = {\n      requestType: 'batchCancel',\n      rows: this.parent.getRowsObject()\n    };\n    gObj.trigger(events.batchCancel, args);\n\n    if (gObj.frozenColumns) {\n      rows.splice(this.parent.getMovableRowsObject().length, rows.length);\n    }\n  };\n\n  BatchEdit.prototype.deleteRecord = function (fieldname, data) {\n    this.saveCell();\n\n    if (this.validateFormObj()) {\n      this.saveCell(true);\n    }\n\n    this.isAdded = false;\n    this.bulkDelete(fieldname, data);\n\n    if (this.parent.aggregates.length > 0) {\n      this.parent.notify(events.refreshFooterRenderer, {});\n\n      if (this.parent.groupSettings.columns.length > 0) {\n        this.parent.notify(events.groupAggregates, {});\n      }\n    }\n  };\n\n  BatchEdit.prototype.addRecord = function (data) {\n    this.bulkAddRow(data);\n  };\n\n  BatchEdit.prototype.endEdit = function (data) {\n    if (this.parent.isEdit && this.validateFormObj()) {\n      return;\n    }\n\n    this.batchSave();\n  };\n\n  BatchEdit.prototype.validateFormObj = function () {\n    return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();\n  };\n\n  BatchEdit.prototype.batchSave = function () {\n    var gObj = this.parent;\n    var deletedRecords = 'deletedRecords';\n\n    if (gObj.isCheckBoxSelection) {\n      var checkAllBox = gObj.element.querySelector('.e-checkselectall').parentElement;\n\n      if (checkAllBox.classList.contains('e-checkbox-disabled') && gObj.pageSettings.totalRecordsCount > gObj.currentViewData.length) {\n        removeClass([checkAllBox], ['e-checkbox-disabled']);\n      }\n    }\n\n    var cols = this.parent.getColumns();\n\n    if (isBlazor()) {\n      for (var i = 0; i < cols.length; i++) {\n        var col = cols[i];\n\n        if (col.template) {\n          blazorTemplates[this.parent.element.id + col.uid] = [];\n          resetBlazorTemplate(this.parent.element.id + col.uid, 'Template');\n        }\n      }\n    }\n\n    this.saveCell();\n\n    if (gObj.isEdit || this.editNextValCell() || gObj.isEdit) {\n      return;\n    }\n\n    var changes = this.getBatchChanges();\n\n    if (this.parent.selectionSettings.type === 'Multiple' && changes[deletedRecords].length && this.parent.selectionSettings.persistSelection) {\n      changes[deletedRecords] = this.removeSelectedData;\n      this.removeSelectedData = [];\n    }\n\n    var original = {\n      changedRecords: this.parent.getRowsObject().filter(function (row) {\n        return row.isDirty && ['add', 'delete'].indexOf(row.edit) === -1;\n      }).map(function (row) {\n        return row.data;\n      })\n    };\n    var args = {\n      batchChanges: changes,\n      cancel: false\n    };\n    gObj.trigger(events.beforeBatchSave, args, function (beforeBatchSaveArgs) {\n      if (beforeBatchSaveArgs.cancel) {\n        return;\n      }\n\n      gObj.showSpinner();\n      gObj.notify(events.bulkSave, {\n        changes: changes,\n        original: original\n      });\n    });\n  };\n\n  BatchEdit.prototype.getBatchChanges = function () {\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var rows = this.parent.getRowsObject();\n    var mRows = this.parent.getMovableRowsObject();\n    var frzCols = this.parent.getFrozenColumns();\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n\n      if (row.isDirty) {\n        switch (row.edit) {\n          case 'add':\n            changes.addedRecords.push(row.changes);\n            break;\n\n          case 'delete':\n            changes.deletedRecords.push(row.data);\n            break;\n\n          default:\n            changes.changedRecords.push(row.changes);\n        }\n      }\n    }\n\n    return changes;\n  };\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.removeRowObjectFromUID = function (uid) {\n    var rows = this.parent.getRowsObject();\n    var i = 0;\n\n    for (var len = rows.length; i < len; i++) {\n      if (rows[i].uid === uid) {\n        break;\n      }\n    }\n\n    rows.splice(i, 1);\n  };\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.addRowObject = function (row) {\n    var isTop = this.parent.editSettings.newRowPosition === 'Top';\n    isTop ? this.parent.getRowsObject().unshift(row) : this.parent.getRowsObject().push(row);\n    var mRow = this.parent.getMovableRowsObject();\n\n    if (this.parent.getFrozenColumns() && !mRow.length) {\n      isTop ? mRow.unshift(row) : mRow.push(row);\n    }\n  };\n\n  BatchEdit.prototype.bulkDelete = function (fieldname, data) {\n    var _this = this;\n\n    this.removeSelectedData = [];\n    var gObj = this.parent;\n\n    if (data) {\n      gObj.selectRow(this.getIndexFromData(data));\n    }\n\n    var index = gObj.selectedRowIndex;\n    var selectedRows = gObj.getSelectedRows();\n    var args = {\n      primaryKey: this.parent.getPrimaryKeyFieldNames(),\n      rowIndex: index,\n      rowData: data ? data : gObj.getSelectedRecords()[0],\n      cancel: false\n    };\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      args.row = data ? gObj.getRows()[index] : selectedRows[0];\n\n      if (!args.row) {\n        return;\n      }\n    }\n\n    gObj.trigger(events.beforeBatchDelete, args, function (beforeBatchDeleteArgs) {\n      if (beforeBatchDeleteArgs.cancel) {\n        return;\n      }\n\n      beforeBatchDeleteArgs.row = beforeBatchDeleteArgs.row ? beforeBatchDeleteArgs.row : data ? gObj.getRows()[index] : selectedRows[0];\n\n      if (_this.parent.frozenColumns || selectedRows.length === 1) {\n        var uid = beforeBatchDeleteArgs.row.getAttribute('data-uid');\n\n        if (beforeBatchDeleteArgs.row.classList.contains('e-insertedrow')) {\n          _this.removeRowObjectFromUID(uid);\n\n          remove(beforeBatchDeleteArgs.row);\n        } else {\n          var rowObj = gObj.getRowObjectFromUID(uid);\n          rowObj.isDirty = true;\n          rowObj.edit = 'delete';\n          classList(beforeBatchDeleteArgs.row, ['e-hiddenrow', 'e-updatedtd'], []);\n\n          if (gObj.getFrozenColumns()) {\n            classList(data ? gObj.getMovableRows()[index] : selectedRows[1], ['e-hiddenrow', 'e-updatedtd'], []);\n\n            if (gObj.frozenRows && index < gObj.frozenRows && gObj.getMovableDataRows().length >= gObj.frozenRows) {\n              gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').appendChild(gObj.getMovableRowByIndex(gObj.frozenRows - 1));\n              gObj.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody').appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));\n            }\n          } else if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {\n            gObj.getHeaderContent().querySelector('tbody').appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));\n          }\n        }\n\n        delete beforeBatchDeleteArgs.row;\n      } else {\n        for (var i = 0; i < selectedRows.length; i++) {\n          var uniqueid = selectedRows[i].getAttribute('data-uid');\n\n          if (selectedRows[i].classList.contains('e-insertedrow')) {\n            _this.removeRowObjectFromUID(uniqueid);\n\n            remove(selectedRows[i]);\n          } else {\n            classList(selectedRows[i], ['e-hiddenrow', 'e-updatedtd'], []);\n            var selectedRow = gObj.getRowObjectFromUID(uniqueid);\n            selectedRow.isDirty = true;\n            selectedRow.edit = 'delete';\n            delete selectedRows[i];\n          }\n        }\n      }\n\n      _this.refreshRowIdx();\n\n      _this.removeSelectedData = gObj.getSelectedRecords();\n      gObj.clearSelection();\n      gObj.selectRow(index);\n      gObj.trigger(events.batchDelete, beforeBatchDeleteArgs);\n      gObj.notify(events.batchDelete, {\n        rows: _this.parent.getRowsObject()\n      });\n      gObj.notify(events.toolbarRefresh, {});\n    });\n  };\n\n  BatchEdit.prototype.refreshRowIdx = function () {\n    var rows = [];\n    var mRows = [];\n    var nonMovableRows = [];\n    var frzCols = this.parent.getFrozenColumns();\n\n    if (this.parent.frozenRows) {\n      rows = [].slice.call(this.parent.getHeaderTable().querySelector('tbody').children);\n\n      if (frzCols) {\n        mRows = [].slice.call(this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').children);\n\n        for (var i = 0; i < mRows.length; i++) {\n          nonMovableRows[i] = this.parent.createElement('tr', {\n            className: 'emptynonmv'\n          });\n        }\n      }\n    }\n\n    if (frzCols) {\n      mRows = mRows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));\n      nonMovableRows = nonMovableRows.concat([].slice.call(this.parent.element.querySelector('.e-movablecontent').querySelector('tbody').children));\n    }\n\n    rows = rows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));\n\n    for (var i = 0, j = 0, len = rows.length; i < len; i++) {\n      if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {\n        rows[i].setAttribute('aria-rowindex', j.toString());\n\n        if (frzCols) {\n          mRows[i].setAttribute('aria-rowindex', j.toString());\n\n          if (nonMovableRows[i].classList.contains('e-row')) {\n            nonMovableRows[i].setAttribute('aria-rowindex', j.toString());\n          }\n        }\n\n        j++;\n      } else {\n        rows[i].removeAttribute('aria-rowindex');\n\n        if (frzCols) {\n          mRows[i].removeAttribute('aria-rowindex');\n        }\n      }\n    }\n  };\n\n  BatchEdit.prototype.getIndexFromData = function (data) {\n    return inArray(data, this.parent.getCurrentViewRecords());\n  };\n\n  BatchEdit.prototype.bulkAddRow = function (data) {\n    var _this = this;\n\n    var gObj = this.parent;\n\n    if (!gObj.editSettings.allowAdding) {\n      return;\n    }\n\n    if (gObj.isEdit) {\n      this.saveCell();\n      this.parent.notify(events.editNextValCell, {});\n    }\n\n    if (gObj.isEdit) {\n      return;\n    }\n\n    this.parent.element.classList.add('e-editing');\n    var defaultData = data ? data : this.getDefaultData();\n    var args = {\n      defaultData: defaultData,\n      primaryKey: gObj.getPrimaryKeyFieldNames(),\n      cancel: false\n    };\n    gObj.trigger(events.beforeBatchAdd, args, function (beforeBatchAddArgs) {\n      if (beforeBatchAddArgs.cancel) {\n        return;\n      }\n\n      _this.isAdded = true;\n      gObj.clearSelection();\n      var mTr;\n      var mTbody;\n      var row = new RowRenderer(_this.serviceLocator, null, _this.parent);\n      var model = new RowModelGenerator(_this.parent);\n      var modelData = model.generateRows([beforeBatchAddArgs.defaultData]);\n      var tr = row.render(modelData[0], gObj.getColumns());\n      var col;\n      var index;\n\n      for (var i = 0; i < _this.parent.groupSettings.columns.length; i++) {\n        tr.insertBefore(_this.parent.createElement('td', {\n          className: 'e-indentcell'\n        }), tr.firstChild);\n        modelData[0].cells.unshift(new Cell({\n          cellType: CellType.Indent\n        }));\n      }\n\n      var tbody = gObj.getContentTable().querySelector('tbody');\n      tr.classList.add('e-insertedrow');\n\n      if (tbody.querySelector('.e-emptyrow')) {\n        tbody.querySelector('.e-emptyrow').remove();\n      }\n\n      if (gObj.getFrozenColumns()) {\n        mTr = _this.renderMovable(tr);\n\n        if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {\n          mTbody = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n        } else {\n          mTbody = gObj.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n        }\n\n        _this.parent.editSettings.newRowPosition === 'Top' ? mTbody.insertBefore(mTr, mTbody.firstChild) : mTbody.appendChild(mTr);\n        addClass(mTr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);\n\n        if (_this.parent.height === 'auto') {\n          _this.parent.notify(events.frozenHeight, {});\n        }\n      }\n\n      if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {\n        tbody = gObj.getHeaderContent().querySelector('tbody');\n      } else {\n        tbody = gObj.getContent().querySelector('tbody');\n      }\n\n      _this.parent.editSettings.newRowPosition === 'Top' ? tbody.insertBefore(tr, tbody.firstChild) : tbody.appendChild(tr);\n      addClass(tr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);\n      modelData[0].isDirty = true;\n      modelData[0].changes = extend({}, {}, modelData[0].data, true);\n      modelData[0].edit = 'add';\n\n      _this.addRowObject(modelData[0]);\n\n      _this.refreshRowIdx();\n\n      _this.focus.forgetPrevious();\n\n      gObj.notify(events.batchAdd, {\n        rows: _this.parent.getRowsObject(),\n        args: {\n          isFrozen: _this.parent.getFrozenColumns()\n        }\n      });\n\n      var changes = _this.getBatchChanges();\n\n      var addedRecords = 'addedRecords';\n      _this.parent.editSettings.newRowPosition === 'Top' ? gObj.selectRow(0) : gObj.selectRow(_this.parent.getCurrentViewRecords().length + changes[addedRecords].length - 1);\n\n      if (!data) {\n        index = _this.findNextEditableCell(0, true);\n        col = gObj.getColumns()[index];\n        _this.parent.editSettings.newRowPosition === 'Top' ? _this.editCell(0, col.field, true) : _this.editCell(_this.parent.getCurrentViewRecords().length + changes[addedRecords].length - 1, col.field, true);\n      }\n\n      if (_this.parent.aggregates.length > 0 && data) {\n        _this.parent.notify(events.refreshFooterRenderer, {});\n      }\n\n      var args1 = {\n        defaultData: beforeBatchAddArgs.defaultData,\n        row: tr,\n        columnObject: col,\n        columnIndex: index,\n        primaryKey: beforeBatchAddArgs.primaryKey,\n        cell: tr.cells[index]\n      };\n      gObj.trigger(events.batchAdd, args1);\n\n      if (isBlazor()) {\n        _this.parent.notify(events.toolbarRefresh, {});\n\n        _this.parent.notify('start-add', {});\n      }\n    });\n  };\n\n  BatchEdit.prototype.renderMovable = function (ele) {\n    var mEle = ele.cloneNode(true);\n\n    for (var i = 0; i < this.parent.frozenColumns; i++) {\n      mEle.removeChild(mEle.children[0]);\n    }\n\n    for (var i = this.parent.frozenColumns, len = ele.childElementCount; i < len; i++) {\n      ele.removeChild(ele.children[ele.childElementCount - 1]);\n    }\n\n    return mEle;\n  };\n\n  BatchEdit.prototype.findNextEditableCell = function (columnIndex, isAdd, isValOnly) {\n    var cols = this.parent.getColumns();\n    var endIndex = cols.length;\n    var validation;\n\n    for (var i = columnIndex; i < endIndex; i++) {\n      validation = isValOnly ? isNullOrUndefined(cols[i].validationRules) : false;\n\n      if (!isAdd && this.checkNPCell(cols[i])) {\n        return i;\n      } else if (isAdd && !cols[i].template && cols[i].visible && cols[i].allowEditing && !(cols[i].isIdentity && cols[i].isPrimaryKey) && !validation) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  BatchEdit.prototype.checkNPCell = function (col) {\n    return !col.template && col.visible && !col.isPrimaryKey && !col.isIdentity && col.allowEditing;\n  };\n\n  BatchEdit.prototype.getDefaultData = function () {\n    var gObj = this.parent;\n    var data = {};\n    var dValues = {\n      'number': 0,\n      'string': null,\n      'boolean': false,\n      'date': null,\n      'datetime': null\n    };\n\n    for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {\n      var col = _a[_i];\n\n      if (col.field) {\n        setValue(col.field, col.defaultValue ? col.defaultValue : dValues[col.type], data);\n      }\n    }\n\n    return data;\n  };\n\n  BatchEdit.prototype.setCellIdx = function (target) {\n    var gLen = 0;\n\n    if (this.parent.allowGrouping) {\n      gLen = this.parent.groupSettings.columns.length;\n    }\n\n    this.cellDetails.cellIndex = target.cellIndex - gLen;\n    this.cellDetails.rowIndex = parseInt(target.getAttribute('index'), 10);\n  };\n\n  BatchEdit.prototype.editCell = function (index, field, isAdd) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var col = gObj.getColumnByField(field);\n    var keys = gObj.getPrimaryKeyFieldNames();\n    this.parent.element.classList.add('e-editing');\n\n    if (isBlazor() && col.template && !isAdd) {\n      resetBlazorTemplate(this.parent.element.id + col.uid, 'Template', index);\n    }\n\n    if (gObj.editSettings.allowEditing && col.allowEditing) {\n      if (gObj.isEdit && !(this.cellDetails.column.field === field && this.cellDetails.rowIndex === index && this.parent.getDataRows().length - 1 !== index)) {\n        this.saveCell();\n\n        if (this.cellDetails.rowIndex === index && this.cellDetails.column.field === field) {\n          return;\n        }\n      }\n\n      if (gObj.isEdit) {\n        return;\n      }\n\n      var row_1;\n      var rowData_1;\n      var mRowData = void 0;\n      var colIdx = gObj.getColumnIndexByField(field);\n      var frzCols = gObj.getFrozenColumns();\n\n      if (frzCols && colIdx >= frzCols) {\n        row_1 = gObj.getMovableDataRows()[index];\n        mRowData = this.parent.getRowObjectFromUID(this.parent.getMovableDataRows()[index].getAttribute('data-uid'));\n        rowData_1 = mRowData.changes ? extend({}, {}, mRowData.changes, true) : extend({}, {}, this.getDataByIndex(index), true);\n      } else {\n        row_1 = gObj.getDataRows()[index];\n        rowData_1 = extend({}, {}, this.getDataByIndex(index), true);\n      }\n\n      if (keys[0] === col.field && !row_1.classList.contains('e-insertedrow') || col.columns || col.isPrimaryKey && col.isIdentity) {\n        this.parent.isLastCellPrimaryKey = true;\n        return;\n      }\n\n      this.parent.isLastCellPrimaryKey = false;\n      var rowObj = gObj.getRowObjectFromUID(row_1.getAttribute('data-uid'));\n      var cells_1 = [].slice.apply(row_1.cells);\n      var args = {\n        columnName: col.field,\n        columnObject: col,\n        isForeignKey: !isNullOrUndefined(col.foreignKeyValue),\n        primaryKey: keys,\n        rowData: rowData_1,\n        validationRules: extend({}, col.validationRules ? col.validationRules : {}),\n        value: getObject(col.field, rowData_1),\n        type: !isAdd ? 'edit' : 'add',\n        cancel: false,\n        foreignKeyData: rowObj && rowObj.foreignKeyData\n      };\n\n      if (!isBlazor() || this.parent.isJsComponent) {\n        args.cell = cells_1[this.getColIndex(cells_1, this.getCellIdx(col.uid))];\n        args.row = row_1;\n\n        if (!args.cell) {\n          return;\n        }\n      }\n\n      gObj.trigger(events.cellEdit, args, function (cellEditArgs) {\n        if (cellEditArgs.cancel) {\n          return;\n        }\n\n        cellEditArgs.cell = cellEditArgs.cell ? cellEditArgs.cell : cells_1[_this.getColIndex(cells_1, _this.getCellIdx(col.uid))];\n        cellEditArgs.row = cellEditArgs.row ? cellEditArgs.row : row_1;\n        _this.cellDetails = {\n          rowData: rowData_1,\n          column: col,\n          value: cellEditArgs.value,\n          isForeignKey: cellEditArgs.isForeignKey,\n          rowIndex: index,\n          cellIndex: parseInt(cellEditArgs.cell.getAttribute('aria-colindex'), 10),\n          foreignKeyData: cellEditArgs.foreignKeyData\n        };\n\n        if (cellEditArgs.cell.classList.contains('e-updatedtd')) {\n          _this.isColored = true;\n          cellEditArgs.cell.classList.remove('e-updatedtd');\n        }\n\n        gObj.isEdit = true;\n        gObj.clearSelection();\n\n        if (!gObj.isCheckBoxSelection || !gObj.isPersistSelection) {\n          gObj.selectRow(_this.cellDetails.rowIndex, true);\n        }\n\n        _this.renderer.update(cellEditArgs);\n\n        _this.parent.notify(events.batchEditFormRendered, cellEditArgs);\n\n        _this.form = gObj.element.querySelector('#' + gObj.element.id + 'EditForm');\n        gObj.editModule.applyFormValidation([col]);\n        _this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n      });\n    }\n  };\n\n  BatchEdit.prototype.updateCell = function (rowIndex, field, value) {\n    var col = this.parent.getColumnByField(field);\n    var index = this.parent.getColumnIndexByField(field);\n\n    if (col && !col.isPrimaryKey) {\n      var td = this.parent.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')[index];\n\n      if (this.parent.getFrozenColumns()) {\n        var cells = [].slice.call(this.parent.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')).concat([].slice.call(this.parent.getMovableDataRows()[rowIndex].querySelectorAll('.e-rowcell')));\n        td = cells[index];\n      }\n\n      var rowObj = this.parent.getRowObjectFromUID(td.parentElement.getAttribute('data-uid'));\n      this.refreshTD(td, col, rowObj, value);\n      this.parent.trigger(events.queryCellInfo, {\n        cell: td,\n        column: col,\n        data: rowObj.changes\n      });\n    }\n  };\n\n  BatchEdit.prototype.setChanges = function (rowObj, field, value) {\n    var currentCol = this.parent.getColumnByField(field);\n    var currentRowObj;\n\n    if (this.parent.getFrozenColumns() || currentCol.isFrozen) {\n      currentRowObj = rowObj.isFreezeRow ? this.parent.getMovableRowsObject()[rowObj.index] : this.parent.getRowsObject()[rowObj.index];\n    }\n\n    if (!rowObj.changes) {\n      rowObj.changes = extend({}, {}, rowObj.data, true);\n    }\n\n    if (!isNullOrUndefined(field)) {\n      DataUtil.setValue(field, value, rowObj.changes);\n    }\n\n    if (rowObj.data[field] !== value) {\n      rowObj.isDirty = true;\n    }\n\n    if (currentRowObj) {\n      currentRowObj.changes = extend({}, {}, rowObj.data, true);\n\n      if (!isNullOrUndefined(field)) {\n        DataUtil.setValue(field, value, currentRowObj.changes);\n      }\n\n      currentRowObj.isDirty = true;\n    }\n  };\n\n  BatchEdit.prototype.updateRow = function (index, data) {\n    var keys = Object.keys(data);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var col = keys_1[_i];\n      this.updateCell(index, col, data[col]);\n    }\n  };\n\n  BatchEdit.prototype.getCellIdx = function (uid) {\n    var cIdx = this.parent.getColumnIndexByUid(uid) + this.parent.groupSettings.columns.length;\n\n    if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {\n      cIdx++;\n    }\n\n    if (this.parent.isRowDragable()) {\n      cIdx++;\n    }\n\n    return cIdx;\n  };\n\n  BatchEdit.prototype.refreshTD = function (td, column, rowObj, value) {\n    var cell = new CellRenderer(this.parent, this.serviceLocator);\n    var rowcell;\n    this.setChanges(rowObj, column.field, value);\n    var frzCols = this.parent.getFrozenColumns();\n    refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);\n\n    if (frzCols && this.getCellIdx(column.uid) >= frzCols && this.parent.getColumns().length === rowObj.cells.length) {\n      rowcell = rowObj.cells.slice(frzCols, rowObj.cells.length);\n    } else {\n      rowcell = rowObj.cells;\n    }\n\n    cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - (this.getCellIdx(column.uid) >= frzCols ? frzCols : 0)], rowObj.changes, {\n      'index': this.getCellIdx(column.uid)\n    });\n    td.classList.add('e-updatedtd');\n    this.parent.notify(events.toolbarRefresh, {});\n  };\n\n  BatchEdit.prototype.getColIndex = function (cells, index) {\n    var cIdx = 0;\n\n    if (this.parent.allowGrouping && this.parent.groupSettings.columns) {\n      cIdx = this.parent.groupSettings.columns.length;\n    }\n\n    if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {\n      cIdx++;\n    }\n\n    if (this.parent.isRowDragable()) {\n      cIdx++;\n    }\n\n    for (var m = 0; m < cells.length; m++) {\n      var colIndex = parseInt(cells[m].getAttribute('aria-colindex'), 10);\n\n      if (colIndex === index - cIdx) {\n        return m;\n      }\n    }\n\n    return -1;\n  };\n\n  BatchEdit.prototype.editNextValCell = function () {\n    var gObj = this.parent;\n\n    if (this.isAdded && !gObj.isEdit) {\n      for (var i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {\n        if (gObj.isEdit) {\n          return;\n        }\n\n        var index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, true, true);\n        var col = gObj.getColumns()[index];\n\n        if (col) {\n          this.editCell(0, col.field, true);\n          this.saveCell();\n        }\n      }\n\n      if (!gObj.isEdit) {\n        this.isAdded = false;\n      }\n    }\n  };\n\n  BatchEdit.prototype.saveCell = function (isForceSave) {\n    var gObj = this.parent;\n\n    if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {\n      return;\n    }\n\n    this.parent.element.classList.remove('e-editing');\n    var tr = parentsUntil(this.form, 'e-row');\n    var column = this.cellDetails.column;\n    var obj = {};\n    obj[column.field] = this.cellDetails.rowData[column.field];\n    var editedData = gObj.editModule.getCurrentEditedData(this.form, obj);\n    var cloneEditedData = extend({}, editedData);\n    editedData = extend({}, editedData, this.cellDetails.rowData);\n    var value = getObject(column.field, cloneEditedData);\n\n    if (!isNullOrUndefined(column.field)) {\n      setValue(column.field, value, editedData);\n    }\n\n    var args = {\n      columnName: column.field,\n      value: getObject(column.field, editedData),\n      rowData: this.cellDetails.rowData,\n      previousValue: this.cellDetails.value,\n      columnObject: column,\n      isForeignKey: this.cellDetails.isForeignKey,\n      cancel: false\n    };\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      args.cell = this.form.parentElement;\n    }\n\n    if (!isForceSave) {\n      gObj.trigger(events.cellSave, args, this.successCallBack(args, tr, column));\n      gObj.notify(events.batchForm, {\n        formObj: this.form\n      });\n    } else {\n      this.successCallBack(args, tr, column)(args);\n    }\n  };\n\n  BatchEdit.prototype.successCallBack = function (cellSaveArgs, tr, column) {\n    var _this = this;\n\n    return function (cellSaveArgs) {\n      var gObj = _this.parent;\n      cellSaveArgs.cell = cellSaveArgs.cell ? cellSaveArgs.cell : _this.form.parentElement;\n\n      if (cellSaveArgs.cancel) {\n        return;\n      }\n\n      gObj.editModule.destroyForm();\n      gObj.isEdit = false;\n      gObj.editModule.destroyWidgets([column]);\n\n      if (isBlazor() && column.template && !cellSaveArgs.cell.parentElement.classList.contains('e-insertedrow')) {\n        updateBlazorTemplate(gObj.element.id + column.uid, 'Template', column, false);\n      }\n\n      _this.parent.notify(events.tooltipDestroy, {});\n\n      _this.refreshTD(cellSaveArgs.cell, column, gObj.getRowObjectFromUID(tr.getAttribute('data-uid')), cellSaveArgs.value);\n\n      removeClass([tr], ['e-editedrow', 'e-batchrow']);\n      removeClass([cellSaveArgs.cell], ['e-editedbatchcell', 'e-boolcell']);\n\n      if (!isNullOrUndefined(cellSaveArgs.value) && cellSaveArgs.value.toString() === (!isNullOrUndefined(_this.cellDetails.value) ? _this.cellDetails.value : '').toString() && !_this.isColored || isNullOrUndefined(cellSaveArgs.value) && isNullOrUndefined(_this.cellDetails.value) && !cellSaveArgs.cell.parentElement.classList.contains('e-insertedrow')) {\n        cellSaveArgs.cell.classList.remove('e-updatedtd');\n      }\n\n      gObj.trigger(events.cellSaved, cellSaveArgs);\n      gObj.notify(events.toolbarRefresh, {});\n      _this.isColored = false;\n\n      if (_this.parent.aggregates.length > 0) {\n        _this.parent.notify(events.refreshFooterRenderer, {});\n\n        if (_this.parent.groupSettings.columns.length > 0 && !_this.isAddRow(_this.cellDetails.rowIndex)) {\n          _this.parent.notify(events.groupAggregates, {});\n        }\n      }\n    };\n  };\n\n  BatchEdit.prototype.getDataByIndex = function (index) {\n    var row = this.parent.getRowObjectFromUID(this.parent.getDataRows()[index].getAttribute('data-uid'));\n    return row.changes ? row.changes : row.data;\n  };\n\n  BatchEdit.prototype.keyDownHandler = function (e) {\n    if ((e.action === 'tab' || e.action === 'shiftTab') && this.parent.isEdit) {\n      var gObj = this.parent;\n      var rowcell = parentsUntil(e.target, 'e-rowcell');\n\n      if (rowcell) {\n        var cell = rowcell.querySelector('.e-field');\n\n        if (cell) {\n          var visibleColumns = this.parent.getVisibleColumns();\n          var columnIndex = e.action === 'tab' ? visibleColumns.length - 1 : 0;\n\n          if (visibleColumns[columnIndex].field === cell.getAttribute('id').slice(this.parent.element.id.length)) {\n            if (this.cellDetails.rowIndex !== gObj.getRows().length - 1) {\n              this.saveCell();\n            } else {\n              if (gObj.editSettings.newRowPosition === 'Top') {\n                gObj.editSettings.newRowPosition = 'Bottom';\n                this.addRecord();\n                gObj.editSettings.newRowPosition = 'Top';\n              } else {\n                this.addRecord();\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.addCancelWhilePaging = function () {\n    if (this.validateFormObj()) {\n      this.parent.notify(events.destroyForm, {});\n      this.parent.isEdit = false;\n      this.isColored = false;\n    }\n  };\n\n  return BatchEdit;\n}();\n\nexport { BatchEdit };","map":null,"metadata":{},"sourceType":"module"}