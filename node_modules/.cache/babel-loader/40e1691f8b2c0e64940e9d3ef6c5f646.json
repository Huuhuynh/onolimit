{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { attributes } from '@syncfusion/ej2-base';\nimport { CellRenderer } from './cell-renderer';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { appendChildren } from '../base/util';\n/**\n * FilterCellRenderer class which responsible for building filter cell.\n * @hidden\n */\n\nvar FilterCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(FilterCellRenderer, _super);\n\n  function FilterCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = _this.parent.createElement('TH', {\n      className: 'e-filterbarcell'\n    });\n    return _this;\n  }\n  /**\n   * Function to return the wrapper for the TH content.\n   * @returns string\n   */\n\n\n  FilterCellRenderer.prototype.getGui = function () {\n    return this.parent.createElement('div');\n  };\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Cell} cell\n   * @param  {Object} data\n   */\n\n\n  FilterCellRenderer.prototype.render = function (cell, data) {\n    var tr = this.parent.element.querySelector('.e-filterbar');\n    var node = this.element.cloneNode();\n    var innerDIV = this.getGui();\n    var input;\n    var column = cell.column;\n    tr.appendChild(node);\n    node.setAttribute('e-mappinguid', column.uid);\n\n    if (column.filterTemplate) {\n      var fltrData = {};\n\n      if (data) {\n        fltrData[column.field] = data[column.field];\n      }\n\n      var col = 'column';\n      fltrData[col] = column;\n\n      if (column.visible) {\n        var tempID = this.parent.element.id + column.uid + 'filterTemplate';\n        var element = column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID);\n        appendChildren(node, element);\n      } else {\n        node.classList.add('e-hide');\n      }\n    } else {\n      if (column.type !== 'checkbox') {\n        if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {\n          node.classList.add('e-fltrtemp');\n          attributes(innerDIV, {\n            'class': 'e-fltrtempdiv'\n          });\n\n          if (isNullOrUndefined(column.filterBarTemplate.create)) {\n            input = this.parent.createElement('input', {\n              id: column.field + '_filterBarcell',\n              className: 'e-filterUi_input e-filtertext e-fltrTemp',\n              attrs: {\n                type: 'search',\n                title: column.headerText\n              }\n            });\n            innerDIV.appendChild(input);\n          } else {\n            var args = {\n              column: column,\n              node: Element\n            };\n            var temp = column.filterBarTemplate.create;\n\n            if (typeof temp === 'string') {\n              temp = getValue(temp, window);\n            }\n\n            input = temp(args);\n\n            if (typeof input === 'string') {\n              var div = this.parent.createElement('div');\n              div.innerHTML = input;\n              input = div.firstChild;\n            }\n\n            attributes(innerDIV, {\n              class: 'e-filterUi_input e-filtertext e-fltrTemp',\n              title: column.headerText,\n              id: column.field + '_filterBarcell'\n            });\n            innerDIV.appendChild(input);\n          }\n        } else {\n          attributes(innerDIV, {\n            'class': 'e-filterdiv e-fltrinputdiv'\n          });\n          input = this.parent.createElement('input', {\n            id: column.field + '_filterBarcell',\n            className: 'e-filtertext',\n            attrs: {\n              type: 'search',\n              title: column.headerText + cell.attributes.title,\n              value: data[cell.column.field] ? data[cell.column.field] : '',\n              role: 'search'\n            }\n          });\n          innerDIV.appendChild(input);\n          var args = {\n            element: input,\n            floatLabelType: 'Never',\n            properties: {\n              enableRtl: this.parent.enableRtl,\n              showClearButton: true\n            }\n          };\n          Input.createInput(args, this.parent.createElement);\n        } //TODO: apply intial filtering\n\n\n        if (column.allowFiltering === false || column.field === '' || isNullOrUndefined(column.field)) {\n          input.setAttribute('disabled', 'true');\n          input.classList.add('e-disable');\n        }\n\n        if (!column.visible) {\n          node.classList.add('e-hide');\n        }\n\n        this.appendHtml(node, innerDIV);\n\n        if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {\n          var templateWrite = column.filterBarTemplate.write;\n          var args = {\n            element: input,\n            column: column\n          };\n\n          if (typeof templateWrite === 'string') {\n            templateWrite = getValue(templateWrite, window);\n          }\n\n          templateWrite.call(this, args);\n        }\n      }\n    }\n\n    return node;\n  };\n  /**\n   * Function to specifies how the result content to be placed in the cell.\n   * @param  {Element} node\n   * @param  {string|Element} innerHTML\n   * @returns Element\n   */\n\n\n  FilterCellRenderer.prototype.appendHtml = function (node, innerHtml) {\n    node.appendChild(innerHtml);\n    return node;\n  };\n\n  return FilterCellRenderer;\n}(CellRenderer);\n\nexport { FilterCellRenderer };","map":null,"metadata":{},"sourceType":"module"}