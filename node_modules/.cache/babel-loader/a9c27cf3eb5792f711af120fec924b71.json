{"ast":null,"code":"import { Droppable, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate, removeClass } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { getScrollBarWidth, isGroupAdaptive } from '../base/util';\n/**\n * Content module is used to render grid content\n * @hidden\n */\n\nvar ContentRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for content renderer module\n   */\n  function ContentRender(parent, serviceLocator) {\n    var _this = this;\n\n    this.rows = [];\n    this.freezeRows = [];\n    this.movableRows = [];\n    this.freezeRowElements = [];\n    this.isLoaded = true;\n    this.viewColIndexes = [];\n\n    this.drop = function (e) {\n      _this.parent.notify(events.columnDrop, {\n        target: e.target,\n        droppedElement: e.droppedElement\n      });\n\n      remove(e.droppedElement);\n    };\n\n    this.rafCallback = function (args) {\n      var arg = args;\n      return function () {\n        if (_this.parent.getFrozenColumns() && _this.parent.enableVirtualization) {\n          var mContentRows = [].slice.call(_this.parent.getMovableVirtualContent().querySelectorAll('.e-row'));\n          var fContentRows = [].slice.call(_this.parent.getFrozenVirtualContent().querySelectorAll('.e-row'));\n          _this.isLoaded = !mContentRows ? false : mContentRows.length === fContentRows.length;\n\n          if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n            var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().querySelectorAll('.e-row'));\n            var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().querySelectorAll('.e-row'));\n            _this.isLoaded = mHdr.length === fHdr.length;\n          }\n        }\n\n        _this.ariaService.setBusy(_this.getPanel().firstChild, false);\n\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        var rows = _this.rows.slice(0);\n\n        if (_this.parent.getFrozenColumns() !== 0) {\n          rows = args.isFrozen ? _this.freezeRows : _this.movableRows;\n        }\n\n        _this.parent.notify(events.contentReady, {\n          rows: rows,\n          args: arg\n        });\n\n        if (_this.isLoaded) {\n          _this.parent.trigger(events.dataBound, {});\n\n          if (_this.parent.allowTextWrap) {\n            _this.parent.notify(events.freezeRender, {\n              case: 'textwrap'\n            });\n          }\n\n          if (_this.parent.getFrozenColumns() !== 0 && !_this.parent.allowTextWrap) {\n            _this.parent.notify(events.freezeRender, {\n              case: 'refreshHeight'\n            });\n          }\n        }\n\n        if (arg) {\n          var action = (arg.requestType || '').toLowerCase() + '-complete';\n\n          _this.parent.notify(action, arg);\n\n          if (args.requestType === 'batchsave') {\n            args.cancel = false;\n\n            _this.parent.trigger(events.actionComplete, args);\n          }\n        }\n\n        if (_this.isLoaded) {\n          _this.parent.hideSpinner();\n        }\n      };\n    };\n\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.ariaService = this.serviceLocator.getService('ariaService');\n    this.generator = this.getModelGenerator();\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization) {\n      this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n    }\n\n    this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n  }\n  /**\n   * The function is used to render grid content div\n   */\n\n\n  ContentRender.prototype.renderPanel = function () {\n    var gObj = this.parent;\n    var div = this.parent.createElement('div', {\n      className: 'e-gridcontent'\n    });\n    var innerDiv = this.parent.createElement('div', {\n      className: 'e-content'\n    });\n    this.ariaService.setOptions(innerDiv, {\n      busy: false\n    });\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n    gObj.element.appendChild(div);\n  };\n  /**\n   * The function is used to render grid content table\n   */\n\n\n  ContentRender.prototype.renderTable = function () {\n    var contentDiv = this.getPanel();\n    var virtualTable = contentDiv.querySelector('.e-virtualtable');\n    var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n\n    if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n      remove(virtualTable);\n      remove(virtualTrack);\n    }\n\n    contentDiv.appendChild(this.createContentTable('_content_table'));\n    this.setTable(contentDiv.querySelector('.e-table'));\n    this.ariaService.setOptions(this.getTable(), {\n      multiselectable: this.parent.selectionSettings.type === 'Multiple'\n    });\n    this.initializeContentDrop();\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n    }\n  };\n  /**\n   * The function is used to create content table elements\n   * @return {Element}\n   * @hidden\n   */\n\n\n  ContentRender.prototype.createContentTable = function (id) {\n    var innerDiv = this.getPanel().firstChild;\n\n    if (this.getTable()) {\n      remove(this.getTable());\n    }\n\n    var table = this.parent.createElement('table', {\n      className: 'e-table',\n      attrs: {\n        cellspacing: '0.25px',\n        role: 'grid',\n        id: this.parent.element.id + id\n      }\n    });\n    this.setColGroup(this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true));\n    table.appendChild(this.getColGroup());\n    table.appendChild(this.parent.createElement('tbody'));\n    innerDiv.appendChild(table);\n    return innerDiv;\n  };\n\n  ContentRender.prototype.splitRows = function (idx) {\n    if (this.parent.getFrozenColumns()) {\n      if (idx === 0) {\n        this.freezeRows = this.rows;\n        this.freezeRowElements = this.rowElements;\n      } else {\n        this.movableRows = this.rows;\n      }\n    }\n  };\n  /**\n   * Refresh the content of the Grid.\n   * @return {void}\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  ContentRender.prototype.refreshContentRows = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    var gObj = this.parent;\n\n    if (gObj.currentViewData.length === 0) {\n      return;\n    }\n\n    var dataSource = gObj.currentViewData;\n    var frag = document.createDocumentFragment();\n    var hdrfrag = document.createDocumentFragment();\n    var columns = gObj.getColumns();\n    var tr;\n    var hdrTbody;\n    var frzCols = gObj.getFrozenColumns();\n    var trElement;\n    var row = new RowRenderer(this.serviceLocator, null, this.parent);\n    this.rowElements = [];\n    this.rows = [];\n    var fCont = this.getPanel().querySelector('.e-frozencontent');\n    var mCont = this.getPanel().querySelector('.e-movablecontent');\n    var cont = this.getPanel().querySelector('.e-content');\n\n    if (isGroupAdaptive(gObj)) {\n      if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder'].some(function (value) {\n        return args.requestType === value;\n      })) {\n        gObj.vcRows = [];\n        gObj.vRows = [];\n      }\n    }\n\n    var modelData;\n\n    if (this.parent.enableVirtualization && this.parent.getFrozenColumns()) {\n      if (this.parent.enableColumnVirtualization) {\n        if (args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') {\n          modelData = this.parent.contentModule.generateRows(dataSource, args);\n          args.renderMovableContent = true;\n        } else if (mCont.scrollLeft > 0 && !args.renderMovableContent) {\n          this.viewColIndexes = args.virtualInfo.columnIndexes;\n          var indexes = [];\n\n          for (var i = 0; i < this.parent.getFrozenColumns(); i++) {\n            indexes.push(i);\n          }\n\n          this.parent.setColumnIndexesInView(indexes);\n          args.virtualInfo.columnIndexes = indexes;\n        }\n      }\n\n      modelData = this.parent.contentModule.generateRows(dataSource, args);\n    } else {\n      modelData = this.generator.generateRows(dataSource, args);\n    }\n\n    if (isNullOrUndefined(modelData[0].cells[0])) {\n      mCont.querySelector('tbody').innerHTML = '';\n    }\n\n    var idx = modelData[0].cells[0].index;\n\n    if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns() && args.renderMovableContent && args.requestType === 'virtualscroll' && mCont.scrollLeft > 0 && args.virtualInfo.columnIndexes[0] !== 0) {\n      idx = this.parent.getFrozenColumns();\n    }\n    /* tslint:disable:no-any */\n\n\n    if (this.parent.registeredTemplate && this.parent.registeredTemplate.template && !args.isFrozen) {\n      var templatetoclear = [];\n\n      for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n        for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n          if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n            templatetoclear.push(this.parent.registeredTemplate.template[i]);\n            /* tslint:enable:no-any */\n          }\n        }\n      }\n\n      this.parent.destroyTemplate(['template'], templatetoclear);\n    }\n\n    if (this.parent.enableColumnVirtualization) {\n      var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n      cellMerge.updateVirtualCells(modelData);\n    }\n\n    if (frzCols && idx >= frzCols) {\n      this.tbody = mCont.querySelector('tbody');\n    } else {\n      this.tbody = this.getTable().querySelector('tbody');\n    }\n\n    var startIndex = 0;\n    var blockLoad = true;\n\n    if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n      var top_1 = 'top';\n      var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0;\n\n      if (scrollTop !== 0) {\n        var offsets_1 = gObj.vGroupOffsets;\n        var bSize = gObj.pageSettings.pageSize / 2;\n        var values = Object.keys(offsets_1).map(function (key) {\n          return offsets_1[key];\n        });\n\n        for (var m = 0; m < values.length; m++) {\n          if (scrollTop < values[m]) {\n            if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n              args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n              startIndex = m === 0 || m === 1 ? 0 : m * bSize;\n              break;\n            } else {\n              args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n              startIndex = m === 0 || m === 1 ? 0 : m * bSize;\n              break;\n            }\n          }\n        }\n\n        if (scrollTop + this.contentPanel.firstElementChild.offsetHeight === this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n          blockLoad = false;\n        }\n      }\n    }\n\n    if (gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') {\n      var bIndex = args.virtualInfo.blockIndexes;\n      args.virtualInfo.blockIndexes = [1, 2];\n      var mhdrData = this.vgenerator.generateRows(dataSource, args);\n      mhdrData.splice(this.parent.frozenRows);\n\n      for (var i = 0; i < this.parent.frozenRows; i++) {\n        if (args.virtualInfo.columnIndexes[0] === 0) {\n          mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n        }\n\n        tr = row.render(mhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n\n      args.virtualInfo.blockIndexes = bIndex;\n    }\n\n    for (var i = startIndex, len = modelData.length; i < len; i++) {\n      this.rows.push(modelData[i]);\n\n      if (isGroupAdaptive(gObj) && this.rows.length >= gObj.pageSettings.pageSize && blockLoad) {\n        break;\n      }\n\n      if (!gObj.rowTemplate) {\n        tr = row.render(modelData[i], columns);\n\n        if (gObj.frozenRows && i < gObj.frozenRows && args.requestType !== 'virtualscroll') {\n          hdrfrag.appendChild(tr);\n        } else {\n          frag.appendChild(tr);\n        }\n\n        if (modelData[i].isExpand) {\n          gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n        }\n      } else {\n        var rowTemplateID = gObj.element.id + 'rowTemplate';\n        var elements = gObj.getRowTemplate()(extend({\n          index: i\n        }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n\n        if (elements[0].tagName === 'TBODY') {\n          for (var j = 0; j < elements.length; j++) {\n            var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n\n            if (isTR || elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length) {\n              tr = isTR ? elements[j] : elements[j].querySelector('tr');\n            }\n          }\n\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            hdrfrag.appendChild(tr);\n          } else {\n            frag.appendChild(tr);\n          }\n        } else {\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            tr = appendChildren(hdrfrag, elements);\n          } else {\n            // frag.appendChild(tr);\n            tr = appendChildren(frag, elements);\n            trElement = tr.lastElementChild;\n          }\n        }\n\n        var arg = {\n          data: modelData[i].data,\n          row: trElement ? trElement : tr\n        };\n        this.parent.trigger(events.rowDataBound, arg);\n      }\n\n      if (modelData[i].isDataRow) {\n        this.rowElements.push(tr);\n      }\n\n      this.ariaService.setOptions(this.getTable(), {\n        colcount: gObj.getColumns().length.toString()\n      });\n    }\n\n    this.splitRows(idx);\n\n    if (gObj.frozenRows && args.requestType !== 'virtualscroll' || args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X') {\n      hdrTbody = frzCols ? gObj.getHeaderContent().querySelector(idx === 0 ? '.e-frozenheader' : '.e-movableheader').querySelector('tbody') : gObj.getHeaderTable().querySelector('tbody');\n      hdrTbody.innerHTML = '';\n      hdrTbody.appendChild(hdrfrag);\n    }\n\n    if (gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n      cont.style.height = cont.offsetHeight - hdrTbody.offsetHeight + 'px';\n    }\n\n    if (frzCols && idx === 0) {\n      this.getPanel().firstChild.style.overflowY = 'hidden';\n    }\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      args.rows = this.rows.slice(0);\n    }\n\n    args.isFrozen = this.parent.getFrozenColumns() !== 0 && !args.isFrozen;\n    this.index = idx;\n    getUpdateUsingRaf(function () {\n      _this.parent.notify(events.beforeFragAppend, args);\n\n      var isVFTable = _this.parent.enableVirtualization && _this.parent.getFrozenColumns() !== 0;\n\n      if (!_this.parent.enableVirtualization) {\n        remove(_this.tbody);\n        _this.tbody = _this.parent.createElement('tbody');\n      }\n\n      if (frzCols && !isVFTable) {\n        _this.tbody.appendChild(frag);\n\n        if (_this.index === 0) {\n          _this.isLoaded = false;\n          fCont.querySelector('table').appendChild(_this.tbody);\n        } else {\n          if (_this.tbody.childElementCount < 1) {\n            _this.tbody.appendChild(_this.parent.createElement('tr').appendChild(_this.parent.createElement('td')));\n          }\n\n          _this.isLoaded = true;\n          mCont.querySelector('table').appendChild(_this.tbody);\n          fCont.style.height = mCont.offsetHeight - getScrollBarWidth() + 'px';\n          mCont.style.overflowY = _this.parent.height !== 'auto' ? 'scroll' : 'auto';\n          fCont.style.borderRightWidth = '1px';\n        }\n      } else {\n        if (gObj.rowTemplate) {\n          updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n        }\n\n        if (isVFTable) {\n          if (!args.renderMovableContent) {\n            _this.appendContent(fCont.querySelector('tbody'), frag, args);\n\n            if (_this.parent.enableColumnVirtualization && mCont.scrollLeft > 0) {\n              _this.parent.setColumnIndexesInView(_this.viewColIndexes);\n\n              args.virtualInfo.columnIndexes = _this.viewColIndexes;\n            }\n          } else {\n            _this.appendContent(mCont.querySelector('tbody'), frag, args);\n\n            if (args.virtualInfo && args.virtualInfo.direction !== 'right' && args.virtualInfo.direction !== 'left') {\n              fCont.style.height = mCont.offsetHeight - getScrollBarWidth() + 'px';\n            }\n\n            args.renderMovableContent = false;\n          }\n        } else {\n          _this.appendContent(_this.tbody, frag, args);\n        }\n      }\n\n      if (frzCols && idx === 0) {\n        if (isVFTable) {\n          args.renderMovableContent = true;\n        }\n\n        _this.refreshContentRows(extend({}, args));\n      }\n\n      frag = null;\n    }, this.rafCallback(extend({}, args)));\n  };\n\n  ContentRender.prototype.appendContent = function (tbody, frag, args) {\n    tbody.appendChild(frag);\n    this.getTable().appendChild(tbody);\n  };\n  /**\n   * Get the content div element of grid\n   * @return {Element}\n   */\n\n\n  ContentRender.prototype.getPanel = function () {\n    return this.contentPanel;\n  };\n  /**\n   * Set the content div element of grid\n   * @param  {Element} panel\n   */\n\n\n  ContentRender.prototype.setPanel = function (panel) {\n    this.contentPanel = panel;\n  };\n  /**\n   * Get the content table element of grid\n   * @return {Element}\n   */\n\n\n  ContentRender.prototype.getTable = function () {\n    return this.contentTable;\n  };\n  /**\n   * Set the content table element of grid\n   * @param  {Element} table\n   */\n\n\n  ContentRender.prototype.setTable = function (table) {\n    this.contentTable = table;\n  };\n  /**\n   * Get the Row collection in the Grid.\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>}\n   */\n\n\n  ContentRender.prototype.getRows = function () {\n    return this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>}\n   */\n\n\n  ContentRender.prototype.getMovableRows = function () {\n    return this.movableRows;\n  };\n  /**\n   * Get the content table data row elements\n   * @return {Element}\n   */\n\n\n  ContentRender.prototype.getRowElements = function () {\n    return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n  };\n  /**\n   * Get the Freeze pane movable content table data row elements\n   * @return {Element}\n   */\n\n\n  ContentRender.prototype.getMovableRowElements = function () {\n    return this.rowElements;\n  };\n  /**\n   * Get the content table data row elements\n   * @return {Element}\n   */\n\n\n  ContentRender.prototype.setRowElements = function (elements) {\n    this.rowElements = elements;\n  };\n  /**\n   * Get the header colgroup element\n   * @returns {Element}\n   */\n\n\n  ContentRender.prototype.getColGroup = function () {\n    return this.colgroup;\n  };\n  /**\n   * Set the header colgroup element\n   * @param {Element} colgroup\n   * @returns {Element}\n   */\n\n\n  ContentRender.prototype.setColGroup = function (colGroup) {\n    if (!isNullOrUndefined(colGroup)) {\n      colGroup.id = 'content-' + colGroup.id;\n    }\n\n    return this.colgroup = colGroup;\n  };\n  /**\n   * Function to hide content table column based on visible property\n   * @param  {Column[]} columns?\n   */\n\n\n  ContentRender.prototype.setVisible = function (columns) {\n    var gObj = this.parent;\n    var frzCols = gObj.getFrozenColumns();\n    var rows = [];\n\n    if (frzCols) {\n      var fRows = this.freezeRows;\n      var mRows = this.movableRows;\n      var rowLen = fRows.length;\n      var cellLen = void 0;\n\n      for (var i = 0, row = void 0; i < rowLen; i++) {\n        cellLen = mRows[i].cells.length;\n        row = fRows[i].clone();\n\n        for (var j = 0; j < cellLen; j++) {\n          row.cells.push(mRows[i].cells[j]);\n        }\n\n        rows.push(row);\n      }\n    } else {\n      rows = this.getRows();\n    }\n\n    var element;\n    var testRow;\n    rows.some(function (r) {\n      if (r.isDataRow) {\n        testRow = r;\n      }\n\n      return r.isDataRow;\n    });\n    var tasks = [];\n    var needFullRefresh = true;\n\n    if (!gObj.groupSettings.columns.length && testRow) {\n      needFullRefresh = false;\n    }\n\n    var tr = gObj.getDataRows();\n    var args = {};\n    var contentrows = this.rows.filter(function (row) {\n      return !row.isDetailRow;\n    });\n\n    for (var c = 0, clen = columns.length; c < clen; c++) {\n      var column = columns[c];\n      var idx = this.parent.getNormalizedColumnIndex(column.uid);\n      var displayVal = column.visible === true ? '' : 'none';\n\n      if (idx !== -1 && testRow && idx < testRow.cells.length) {\n        if (frzCols) {\n          if (idx < frzCols) {\n            setStyleAttribute(this.getColGroup().childNodes[idx], {\n              'display': displayVal\n            });\n            contentrows = this.freezeRows;\n          } else {\n            var mTable = gObj.getContent().querySelector('.e-movablecontent').querySelector('colgroup');\n            idx = idx - frzCols;\n            setStyleAttribute(mTable.childNodes[idx], {\n              'display': displayVal\n            });\n            tr = gObj.getMovableDataRows();\n            contentrows = this.movableRows;\n          }\n        } else {\n          if (gObj.isRowDragable()) {\n            idx++;\n          }\n\n          setStyleAttribute(this.getColGroup().childNodes[idx], {\n            'display': displayVal\n          });\n\n          if (gObj.isRowDragable()) {\n            idx--;\n          }\n        }\n      }\n\n      idx = gObj.isDetail() ? idx - 1 : idx;\n\n      if (!needFullRefresh) {\n        this.setDisplayNone(tr, idx, displayVal, contentrows);\n      }\n\n      if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n        this.parent.updateMediaColumns(column);\n      }\n\n      this.parent.invokedFromMedia = false;\n    }\n\n    if (needFullRefresh) {\n      this.refreshContentRows({\n        requestType: 'refresh'\n      });\n    } else {\n      if (!this.parent.getFrozenColumns()) {\n        this.parent.notify(events.partialRefresh, {\n          rows: contentrows,\n          args: args\n        });\n      } else {\n        this.parent.notify(events.partialRefresh, {\n          rows: this.freezeRows,\n          args: {\n            isFrozen: true,\n            rows: this.freezeRows\n          }\n        });\n        this.parent.notify(events.partialRefresh, {\n          rows: this.movableRows,\n          args: {\n            isFrozen: false,\n            rows: this.movableRows\n          }\n        });\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n    Object.keys(tr).forEach(function (i) {\n      if (tr[i].querySelectorAll('td.e-rowcell').length) {\n        setStyleAttribute(tr[i].querySelectorAll('td.e-rowcell')[idx], {\n          'display': displayVal\n        });\n\n        if (tr[i].querySelectorAll('td.e-rowcell')[idx].classList.contains('e-hide')) {\n          removeClass([tr[i].querySelectorAll('td.e-rowcell')[idx]], ['e-hide']);\n        }\n\n        rows[i].cells[idx].visible = displayVal === '' ? true : false;\n      }\n    });\n  };\n\n  ContentRender.prototype.colGroupRefresh = function () {\n    if (this.getColGroup()) {\n      var colGroup = void 0;\n\n      if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()) {\n        colGroup = this.parent.getMovableVirtualHeader().querySelector('colgroup').cloneNode(true);\n      } else {\n        colGroup = isBlazor() ? this.parent.getHeaderTable().querySelector('colgroup').cloneNode(true) : this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true);\n      }\n\n      this.getTable().replaceChild(colGroup, this.getColGroup());\n      this.setColGroup(colGroup);\n    }\n  };\n\n  ContentRender.prototype.initializeContentDrop = function () {\n    var gObj = this.parent;\n    var drop = new Droppable(gObj.getContent(), {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n\n  ContentRender.prototype.canSkip = function (column, row, index) {\n    /**\n     * Skip the toggle visiblity operation when one of the following success\n     * 1. Grid has empty records\n     * 2. column visible property is unchanged\n     * 3. cell`s isVisible property is same as column`s visible property.\n     */\n    return isNullOrUndefined(row) || //(1)\n    isNullOrUndefined(column.visible) || //(2)    \n    row.cells[index].visible === column.visible; //(3)\n  };\n\n  ContentRender.prototype.getModelGenerator = function () {\n    return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  };\n\n  ContentRender.prototype.renderEmpty = function (tbody) {\n    this.getTable().appendChild(tbody);\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().querySelector('tbody').innerHTML = '';\n    }\n  };\n\n  ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n    if (this.parent.getFrozenColumns()) {\n      this.getMovableRows().filter(function (row) {\n        return clearAll || uid === row.uid;\n      }).forEach(function (row) {\n        return row.isSelected = set;\n      });\n    }\n\n    this.getRows().filter(function (row) {\n      return clearAll || uid === row.uid;\n    }).forEach(function (row) {\n      row.isSelected = set;\n      row.cells.forEach(function (cell) {\n        return cell.isSelected = set;\n      });\n    });\n  };\n\n  ContentRender.prototype.getRowByIndex = function (index) {\n    return this.parent.getDataRows()[index];\n  };\n\n  ContentRender.prototype.getVirtualRowIndex = function (index) {\n    return index;\n  };\n\n  ContentRender.prototype.getMovableRowByIndex = function (index) {\n    return this.parent.getMovableDataRows()[index];\n  };\n\n  ContentRender.prototype.enableAfterRender = function (e) {\n    if (e.module === 'group' && e.enable) {\n      this.generator = this.getModelGenerator();\n    }\n  };\n\n  ContentRender.prototype.setRowObjects = function (rows) {\n    this.rows = rows;\n  };\n\n  return ContentRender;\n}();\n\nexport { ContentRender };","map":null,"metadata":{},"sourceType":"module"}