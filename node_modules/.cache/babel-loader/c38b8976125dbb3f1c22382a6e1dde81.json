{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Row } from '../models/row';\nimport { isNullOrUndefined, extend, setValue } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { getForeignData, getUid } from '../../grid/base/util';\n/**\n * GroupModelGenerator is used to generate group caption rows and data rows.\n * @hidden\n */\n\nvar GroupModelGenerator =\n/** @class */\nfunction (_super) {\n  __extends(GroupModelGenerator, _super);\n\n  function GroupModelGenerator(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.rows = [];\n    _this.index = 0;\n    _this.parent = parent;\n    _this.summaryModelGen = new GroupSummaryModelGenerator(parent);\n    _this.captionModelGen = new CaptionSummaryModelGenerator(parent);\n    return _this;\n  }\n\n  GroupModelGenerator.prototype.generateRows = function (data, args) {\n    if (this.parent.groupSettings.columns.length === 0) {\n      return _super.prototype.generateRows.call(this, data, args);\n    }\n\n    this.rows = [];\n    this.index = this.parent.enableVirtualization ? args.startIndex : 0;\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      this.getGroupedRecords(0, data[i], data.level, i, undefined, this.rows.length);\n    }\n\n    this.index = 0;\n    return this.rows;\n  };\n\n  GroupModelGenerator.prototype.getGroupedRecords = function (index, data, raw, parentid, childId, tIndex) {\n    var _a;\n\n    var level = raw;\n\n    if (isNullOrUndefined(data.items)) {\n      if (isNullOrUndefined(data.GroupGuid)) {\n        this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length));\n      } else {\n        for (var j = 0, len = data.length; j < len; j++) {\n          this.getGroupedRecords(index, data[j], data.level, parentid, index, this.rows.length);\n        }\n      }\n    } else {\n      this.rows = this.rows.concat(this.generateCaptionRow(data, index, parentid, childId, tIndex));\n\n      if (data.items && data.items.length) {\n        this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length);\n      }\n\n      if (this.parent.aggregates.length) {\n        var rowCnt = this.rows.length;\n\n        (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, {\n          level: level\n        }));\n\n        for (var i = rowCnt - 1; i >= 0; i--) {\n          if (this.rows[i].isCaptionRow) {\n            this.rows[i].aggregatesCount = this.rows.length - rowCnt;\n          } else if (!this.rows[i].isCaptionRow && !this.rows[i].isDataRow) {\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  GroupModelGenerator.prototype.getCaptionRowCells = function (field, indent, data) {\n    var _this = this;\n\n    var cells = [];\n    var visibles = [];\n    var column = this.parent.getColumnByField(field);\n    var indexes = this.parent.getColumnIndexesInView();\n\n    if (this.parent.enableColumnVirtualization) {\n      column = this.parent.columns.filter(function (c) {\n        return c.field === field;\n      })[0];\n    }\n\n    var groupedLen = this.parent.groupSettings.columns.length;\n    var gObj = this.parent;\n\n    if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {\n      for (var i = 0; i < indent; i++) {\n        cells.push(this.generateIndentCell());\n      }\n\n      cells.push(this.generateCell({}, null, CellType.Expand));\n    }\n\n    indent = this.parent.enableColumnVirtualization ? 1 : this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) - indent + (this.parent.getVisibleColumns().length ? -1 : 0); //Captionsummary cells will be added here.    \n\n    if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {\n      var captionCells = this.captionModelGen.generateRows(data)[0];\n      extend(data, captionCells.data);\n      var cIndex_1 = 0;\n      captionCells.cells.some(function (cell, index) {\n        cIndex_1 = index;\n        return cell.visible && cell.isDataCell;\n      });\n      visibles = captionCells.cells.slice(cIndex_1).filter(function (cell) {\n        return cell.visible;\n      });\n\n      if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {\n        visibles = visibles.slice(1);\n      }\n\n      if (this.parent.getVisibleColumns().length === 1) {\n        visibles = [];\n      }\n\n      indent = indent - visibles.length;\n    }\n\n    var cols = !this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns();\n    var wFlag = true;\n    cols.forEach(function (col, index) {\n      var tmpFlag = wFlag && indexes.indexOf(indent) !== -1;\n\n      if (tmpFlag) {\n        wFlag = false;\n      }\n\n      var cellType = !_this.parent.enableColumnVirtualization || tmpFlag ? CellType.GroupCaption : CellType.GroupCaptionEmpty;\n      indent = _this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;\n\n      if (gObj.isRowDragable()) {\n        indent++;\n      }\n\n      cells.push(_this.generateCell(column, null, cellType, indent));\n    });\n    cells.push.apply(cells, visibles);\n    return cells;\n  };\n\n  GroupModelGenerator.prototype.generateCaptionRow = function (data, indent, parentID, childID, tIndex) {\n    var options = {};\n    var tmp = [];\n    var records = 'records';\n    var col = this.parent.getColumnByField(data.field);\n    options.data = extend({}, data);\n\n    if (col) {\n      options.data.field = data.field;\n    }\n\n    options.isDataRow = false;\n    options.isExpand = true;\n    options.parentGid = parentID;\n    options.childGid = childID;\n    options.tIndex = tIndex;\n    options.isCaptionRow = true;\n    options.gSummary = !isNullOrUndefined(data.items[records]) ? data.items[records].length : data.items.length;\n    options.uid = getUid('grid-row');\n    var row = new Row(options);\n    row.indent = indent;\n    this.getForeignKeyData(row);\n    row.cells = this.getCaptionRowCells(data.field, indent, row.data);\n    return row;\n  };\n\n  GroupModelGenerator.prototype.getForeignKeyData = function (row) {\n    var data = row.data;\n    var col = this.parent.getColumnByField(data.field);\n\n    if (col && col.isForeignColumn && col.isForeignColumn()) {\n      var fkValue = isNullOrUndefined(data.key) ? '' : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col);\n      setValue('foreignKey', fkValue, row.data);\n    }\n  };\n\n  GroupModelGenerator.prototype.generateDataRows = function (data, indent, childID, tIndex) {\n    var rows = [];\n    var indexes = this.parent.getColumnIndexesInView();\n\n    for (var i = 0, len = data.length; i < len; i++, tIndex++) {\n      rows[i] = this.generateRow(data[i], this.index, i ? undefined : 'e-firstchildrow', indent, childID, tIndex);\n\n      for (var j = 0; j < indent; j++) {\n        if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {\n          continue;\n        }\n\n        rows[i].cells.unshift(this.generateIndentCell());\n      }\n\n      this.index++;\n    }\n\n    return rows;\n  };\n\n  GroupModelGenerator.prototype.generateIndentCell = function () {\n    return this.generateCell({}, null, CellType.Indent);\n  };\n\n  GroupModelGenerator.prototype.refreshRows = function (input) {\n    var _this = this;\n\n    var indexes = this.parent.getColumnIndexesInView();\n    input.forEach(function (row) {\n      if (row.isDataRow) {\n        row.cells = _this.generateCells(row);\n\n        for (var j = 0; j < row.indent; j++) {\n          if (_this.parent.enableColumnVirtualization && indexes.indexOf(row.indent) === -1) {\n            continue;\n          }\n\n          row.cells.unshift(_this.generateIndentCell());\n        }\n      } else {\n        var cRow = _this.generateCaptionRow(row.data, row.indent);\n\n        row.cells = cRow.cells;\n      }\n    });\n    return input;\n  };\n\n  return GroupModelGenerator;\n}(RowModelGenerator);\n\nexport { GroupModelGenerator };","map":null,"metadata":{},"sourceType":"module"}