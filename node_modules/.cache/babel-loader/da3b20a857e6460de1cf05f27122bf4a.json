{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\onolimit\\\\src\\\\component\\\\order\\\\main.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Grid, GridColumn as Column, GridToolbar } from '@progress/kendo-react-grid';\nimport { sampleProducts } from './sample-products.jsx';\nimport DialogContainer from './DialogContainer.jsx';\nimport cellWithEditing from './cellWithEditing.jsx';\n\nclass Add extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: sampleProducts.slice(0, 7),\n      productInEdit: undefined\n    };\n\n    this.edit = dataItem => {\n      this.setState({\n        productInEdit: this.cloneProduct(dataItem)\n      });\n    };\n\n    this.remove = dataItem => {\n      this.setState({\n        products: this.state.products.filter(p => p.ProductID !== dataItem.ProductID)\n      });\n    };\n\n    this.save = () => {\n      const dataItem = this.state.productInEdit;\n      const products = this.state.products.slice();\n      const isNewProduct = dataItem.ProductID === undefined;\n\n      if (isNewProduct) {\n        products.unshift(this.newProduct(dataItem));\n      } else {\n        const index = products.findIndex(p => p.ProductID === dataItem.ProductID);\n        products.splice(index, 1, dataItem);\n      }\n\n      this.setState({\n        products: products,\n        productInEdit: undefined\n      });\n    };\n\n    this.cancel = () => {\n      this.setState({\n        productInEdit: undefined\n      });\n    };\n\n    this.insert = () => {\n      this.setState({\n        productInEdit: {}\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      data: this.state.products,\n      style: {\n        height: '420px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(GridToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.insert,\n      className: \"k-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Add New\")), React.createElement(Column, {\n      field: \"ProductID\",\n      title: \"Id\",\n      width: \"50px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Column, {\n      field: \"ProductName\",\n      title: \"Product Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Column, {\n      field: \"UnitsInStock\",\n      title: \"Units In Stock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Column, {\n      field: \"Discontinued\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Column, {\n      title: \"Edit\",\n      cell: cellWithEditing(this.edit, this.remove),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), this.state.productInEdit && React.createElement(DialogContainer, {\n      dataItem: this.state.productInEdit,\n      save: this.save,\n      cancel: this.cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n  dialogTitle() {\n    return \"\".concat(this.state.productInEdit.ProductID === undefined ? 'Add' : 'Edit', \" product\");\n  }\n\n  cloneProduct(product) {\n    return Object.assign({}, product);\n  }\n\n  newProduct(source) {\n    const id = this.state.products.reduce((acc, current) => Math.max(acc, current.ProductID || 0), 0) + 1;\n    const newProduct = {\n      ProductID: id,\n      ProductName: '',\n      UnitsInStock: 0,\n      Discontinued: false\n    };\n    return Object.assign(newProduct, source);\n  }\n\n}","map":{"version":3,"sources":["D:\\Web\\onolimit\\src\\component\\order\\main.jsx"],"names":["React","ReactDOM","Grid","GridColumn","Column","GridToolbar","sampleProducts","DialogContainer","cellWithEditing","Add","Component","state","products","slice","productInEdit","undefined","edit","dataItem","setState","cloneProduct","remove","filter","p","ProductID","save","isNewProduct","unshift","newProduct","index","findIndex","splice","cancel","insert","render","height","dialogTitle","product","Object","assign","source","id","reduce","acc","current","Math","max","ProductName","UnitsInStock","Discontinued"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Grid, GridColumn as Column, GridToolbar } from '@progress/kendo-react-grid';\r\nimport { sampleProducts } from './sample-products.jsx';\r\nimport DialogContainer from './DialogContainer.jsx';\r\nimport cellWithEditing from './cellWithEditing.jsx';\r\n\r\nclass Add extends React.Component {\r\n    state = {\r\n        products: sampleProducts.slice(0, 7),\r\n        productInEdit: undefined\r\n    };\r\n\r\n    edit = (dataItem) => {\r\n        this.setState({ productInEdit: this.cloneProduct(dataItem) });\r\n    }\r\n\r\n    remove = (dataItem) => {\r\n        this.setState({\r\n            products: this.state.products.filter(p => p.ProductID !== dataItem.ProductID)\r\n        });\r\n    }\r\n\r\n    save = () => {\r\n        const dataItem = this.state.productInEdit;\r\n        const products = this.state.products.slice();\r\n        const isNewProduct = dataItem.ProductID === undefined;\r\n\r\n        if (isNewProduct) {\r\n            products.unshift(this.newProduct(dataItem));\r\n        } else {\r\n            const index = products.findIndex(p => p.ProductID === dataItem.ProductID);\r\n            products.splice(index, 1, dataItem);\r\n        }\r\n\r\n        this.setState({\r\n            products: products,\r\n            productInEdit: undefined\r\n        });\r\n    }\r\n\r\n    cancel = () => {\r\n        this.setState({ productInEdit: undefined });\r\n    }\r\n\r\n    insert = () => {\r\n        this.setState({ productInEdit: { } });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Grid\r\n                    data={this.state.products}\r\n                    style={{ height: '420px' }}\r\n                >\r\n                    <GridToolbar>\r\n                        <button\r\n                            onClick={this.insert}\r\n                            className=\"k-button\"\r\n                        >\r\n                            Add New\r\n                        </button>\r\n                    </GridToolbar>\r\n                    <Column field=\"ProductID\" title=\"Id\" width=\"50px\" />\r\n                    <Column field=\"ProductName\" title=\"Product Name\" />\r\n                    <Column field=\"UnitsInStock\" title=\"Units In Stock\" />\r\n                    <Column field=\"Discontinued\" />\r\n                    <Column\r\n                        title=\"Edit\"\r\n                        cell={cellWithEditing(this.edit, this.remove)}\r\n                    />\r\n                </Grid>\r\n                {this.state.productInEdit && <DialogContainer dataItem={this.state.productInEdit} save={this.save} cancel={this.cancel}/>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    dialogTitle() {\r\n        return `${this.state.productInEdit.ProductID === undefined ? 'Add' : 'Edit'} product`;\r\n    }\r\n    cloneProduct(product) {\r\n        return Object.assign({}, product);\r\n    }\r\n\r\n    newProduct(source) {\r\n        const id = this.state.products.reduce((acc, current) => Math.max(acc, current.ProductID || 0), 0) + 1;\r\n        const newProduct = {\r\n            ProductID: id,\r\n            ProductName: '',\r\n            UnitsInStock: 0,\r\n            Discontinued: false\r\n        };\r\n\r\n        return Object.assign(newProduct, source);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}