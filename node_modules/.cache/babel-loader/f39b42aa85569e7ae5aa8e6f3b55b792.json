{"ast":null,"code":"import { isNullOrUndefined, getValue, setValue } from '@syncfusion/ej2-base';\nimport { Row } from '../models/row';\nimport { CellType } from '../base/enum';\nimport { Cell } from '../models/cell';\nimport { getUid } from '../base/util';\nimport { getForeignData } from '../../grid/base/util';\n/**\n * RowModelGenerator is used to generate grid data rows.\n * @hidden\n */\n\nvar RowModelGenerator =\n/** @class */\nfunction () {\n  /**\n   * Constructor for header renderer module\n   */\n  function RowModelGenerator(parent) {\n    this.parent = parent;\n  }\n\n  RowModelGenerator.prototype.generateRows = function (data, args) {\n    var rows = [];\n    var startIndex = this.parent.enableVirtualization ? args.startIndex : 0;\n\n    for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {\n      rows[i] = this.generateRow(data[i], startIndex);\n    }\n\n    return rows;\n  };\n\n  RowModelGenerator.prototype.ensureColumns = function () {\n    //TODO: generate dummy column for group, detail here;\n    var cols = [];\n\n    if (this.parent.detailTemplate || this.parent.childGrid) {\n      cols.push(this.generateCell({}, null, CellType.DetailExpand));\n    }\n\n    if (this.parent.isRowDragable()) {\n      cols.push(this.generateCell({}, null, CellType.RowDragIcon));\n    }\n\n    return cols;\n  };\n\n  RowModelGenerator.prototype.generateRow = function (data, index, cssClass, indent, pid, tIndex) {\n    var options = {};\n    options.foreignKeyData = {};\n    options.uid = getUid('grid-row');\n    options.data = data;\n    options.index = index;\n    options.indent = indent;\n    options.tIndex = tIndex;\n    options.isDataRow = true;\n    options.parentGid = pid;\n\n    if (this.parent.isPrinting) {\n      if (this.parent.hierarchyPrintMode === 'All') {\n        options.isExpand = true;\n      } else if (this.parent.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[index]) {\n        options.isExpand = this.parent.expandedRows[index].isExpand;\n      }\n    }\n\n    options.cssClass = cssClass;\n    options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n    options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;\n    this.refreshForeignKeyRow(options);\n    var cells = this.ensureColumns();\n    var row = new Row(options);\n    row.cells = cells.concat(this.generateCells(options));\n    return row;\n  };\n\n  RowModelGenerator.prototype.refreshForeignKeyRow = function (options) {\n    this.parent.getForeignKeyColumns().forEach(function (col) {\n      setValue(col.field, getForeignData(col, options.data), options.foreignKeyData);\n    });\n  };\n\n  RowModelGenerator.prototype.generateCells = function (options) {\n    var _this = this;\n\n    var dummies = this.parent.getColumns();\n    var tmp = [];\n    dummies.forEach(function (dummy, index) {\n      return tmp.push(_this.generateCell(dummy, options.uid, isNullOrUndefined(dummy.commands) ? undefined : CellType.CommandColumn, null, index, options.foreignKeyData));\n    });\n    return tmp;\n  };\n\n  RowModelGenerator.prototype.generateCell = function (column, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n    var opt = {\n      'visible': column.visible,\n      'isDataCell': !isNullOrUndefined(column.field || column.template),\n      'isTemplate': !isNullOrUndefined(column.template),\n      'rowID': rowId,\n      'column': column,\n      'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,\n      'colSpan': colSpan,\n      'commands': column.commands,\n      'isForeignKey': column.isForeignColumn && column.isForeignColumn(),\n      'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData)\n    };\n\n    if (opt.isDataCell || opt.column.type === 'checkbox') {\n      opt.index = oIndex;\n    }\n\n    return new Cell(opt);\n  };\n\n  RowModelGenerator.prototype.refreshRows = function (input) {\n    var _this = this;\n\n    input.forEach(function (row) {\n      _this.refreshForeignKeyRow(row);\n\n      row.cells = _this.generateCells(row);\n    });\n    return input;\n  };\n\n  return RowModelGenerator;\n}();\n\nexport { RowModelGenerator };","map":null,"metadata":{},"sourceType":"module"}